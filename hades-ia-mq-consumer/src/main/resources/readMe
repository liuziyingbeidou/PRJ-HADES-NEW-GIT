
@authro:郑文  此文档是mq消费参考类，以下代码是在 MqTopicConsumer 中消费主体中编写

long startTime = System.currentTimeMillis();
        MessageExt msg = msgs.get(0);

        String messageJson = new String(msg.getBody());
        logger.info("message body:" + messageJson);

        SignDto signDto = JSON.parseObject(messageJson, SignDto.class);

        if (signDto == null) {
            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
        }

        try {

            if(null != signDto.getDr() && null != signDto.getWbCode() && signDto.getDr().equals("0")){
                /*
                 * 调用签收业务逻辑
                 */
                signService.doBusinessProcess(signDto);
            }else if (null != signDto.getDr() && null != signDto.getWbCode() && signDto.getDr().equals("1")){
                /*
                 * 调用取消签收逻辑
                 */
                cancelSignService.doBusinessProcess(signDto);
                cancelSignService.insertCancleSign(signDto.getWbCode());
            }else{
                logger.info("工作单号为【"+signDto.getWbCode()+"】,DR为空！");
            }
        } catch (LaterDealBusinessException e) {
            e.printStackTrace();
            logger.error("##工作单号为【" + signDto.getWbCode() + "】，执行完成，返回Later：" + e.getMessage());
            return ConsumeConcurrentlyStatus.RECONSUME_LATER;
        } catch (BusinessException e) {
            e.printStackTrace();
            logger.error("##工作单号为【"+signDto.getWbCode()+"】，执行完成，返回Success："+e.getMessage());
            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("##工作单号为【"+signDto.getWbCode()+"】，执行完成，返回Later："+e.getMessage());
            return ConsumeConcurrentlyStatus.RECONSUME_LATER;
        }
        logger.info("##工作单号为【"+signDto.getWbCode()+"】，执行完成，返回Success");
        long endTime = System.currentTimeMillis();
        logger.info("耗时统计：MqTopicConsumer -> 【" + (endTime - startTime) + "】ms");
        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;